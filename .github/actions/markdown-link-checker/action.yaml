name: Markdown Link Checker
description: Checks all Markdown files for broken links, including relative ones

inputs:
  github-token:
    description: GitHub token (not used, but kept for interface compatibility)
    required: false
  args:
    description: Arguments to pass to markdown-link-check
    required: false
    default: "--quiet --retry"

runs:
  using: "composite"
  steps:
    - name: Install markdown-link-check and jq
      shell: bash
      run: npm install -g markdown-link-check

    - name: Run link check on all Markdown files (with relative resolution)
      shell: bash
      run: |
        set -euo pipefail
        echo "üîç Scanning all Markdown files for broken links..."
        failed=0
        total_dead_links=0

        REPO_URL="https://github.com/${GITHUB_REPOSITORY}/blob/${GITHUB_REF_NAME}"
        escaped_repo_url=$(printf '%s\n' "$REPO_URL" | sed 's/[&/\]/\\&/g')

        while IFS= read -r -d '' file; do
          echo "------------------------------------------------------------"
          echo "üìÑ Checking: $file"

          # Create a temp copy with absolute links
          temp_file=$(mktemp)
 
          # Replace relative Markdown links (i.e., not starting with http or mailto)
          awk -v url="$escaped_repo_url" '
          {
            while (match($0, /\[([^\]]+)\]\(([^)]+)\)/, arr)) {
              link = arr[2]
              if (link !~ /^(https?:\/\/|mailto:)/) {
                $0 = substr($0, 1, RSTART - 1) "[" arr[1] "](" url "/" link ")" substr($0, RSTART + RLENGTH)
              } else {
                break
              }
            }
            print
          }
          ' "$file" > "$temp_file"

          output=$(markdown-link-check ${{ inputs.args }} "$temp_file" 2>&1 || true)
          echo "$output"

          if echo "$output" | grep -q '‚úñ'; then
            num_file_dead_links=$(echo "$output" | grep '‚úñ' | wc -l)
            echo "‚ùå $num_file_dead_links broken links in $file"
            total_dead_links=$((total_dead_links + num_file_dead_links))
            failed=1
          else
            echo "‚úÖ No broken links in $file"
          fi

          rm -f "$temp_file"
        done < <(find . -type f -name "*.md" -print0)

        echo "------------------------------------------------------------"
        if [ "$failed" -ne 0 ]; then
          echo "‚ùå Total broken links found: $total_dead_links"
          exit 1
        else
          echo "‚úÖ All Markdown files passed link checks."
        fi
