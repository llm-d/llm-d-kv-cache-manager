name: Markdown Link Checker
description: Checks all Markdown files for broken links, including relative ones

inputs:
  github-token:
    description: GitHub token (not used, but kept for interface compatibility)
    required: false
  args:
    description: Arguments to pass to markdown-link-check
    required: false
    default: "--quiet --retry"

runs:
  using: "composite"
  steps:
    - name: Install markdown-link-check and jq
      shell: bash
      run: npm install -g markdown-link-check

    - name: Run link check on all Markdown files (with relative resolution)
      shell: bash
      run: |
        set -euo pipefail
        echo "🔍 Scanning all Markdown files for broken links..."
        failed=0
        total_dead_links=0

        REPO_REF=$(echo "${GITHUB_REF}" | sed -E 's#refs/heads/##; s#refs/pull/.*/merge#main#')
        REPO_URL="https://github.com/${GITHUB_REPOSITORY}/blob/${REPO_REF}"

        while IFS= read -r -d '' file; do
          echo "------------------------------------------------------------"
          echo "📄 Checking: $file"

          temp_file=$(mktemp)
          file_dir=$(dirname "$file")

          awk -v url="$REPO_URL" -v dir="$file_dir" '
          {
            line = $0
            output = ""
            while (match(line, /\[([^\]]+)\]\(([^)]+)\)/, arr)) {
              prefix = substr(line, 1, RSTART - 1)
              suffix = substr(line, RSTART + RLENGTH)
              text = arr[1]
              link = arr[2]

              if (link ~ /^(https?:\/\/|mailto:|#)/ || link ~ /^[a-zA-Z0-9.-]+\.[a-z]{2,}/) {
                output = output prefix "[" text "](" link ")"
              } else {
                gsub(/^\.\/+/, "", link)
                full_link = url "/" dir "/" link
                gsub(/\/+/, "/", full_link)
                output = output prefix "[" text "](" full_link ")"
              }

              line = suffix
            }
            output = output line
            print output
          }
          ' "$file" > "$temp_file"

          output=$(markdown-link-check --verbose ${{ inputs.args }} "$temp_file" 2>&1 || true)
          echo "$output"

          echo "🔗 Attempted links and HTTP status codes:"
          echo "$output" | grep -E '\[[0-9]{3}\]' || echo "⚠️  No link status lines found."

          ignored_403=$(echo "$output" | grep '✖' | grep '→ Status: 403' || true)
          if [ -n "$ignored_403" ]; then
            echo "ℹ️  Ignored 403 links (not counted as broken):"
            echo "$ignored_403"
          fi

          num_file_dead_links=$(echo "$output" | grep '✖' | grep -v '→ Status: 403' | wc -l)

          if [ "$num_file_dead_links" -gt 0 ]; then
            echo "❌ $num_file_dead_links broken (non-403) links in $file"
            total_dead_links=$((total_dead_links + num_file_dead_links))
            failed=1
          else
            echo "✅ No broken (non-403) links in $file"
          fi

          rm -f "$temp_file"
        done < <(find . -type f -name "*.md" -print0)

        echo "------------------------------------------------------------"
        if [ "$failed" -ne 0 ]; then
          echo "❌ Total broken links found: $total_dead_links"
          exit 1
        else
          echo "✅ All Markdown files passed link checks."
        fi
